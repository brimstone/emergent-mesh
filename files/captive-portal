#!/bin/ash

# Project Byzantium: captive-portal.sh
# This script does the heavy lifting of IP tables manipulation under the
# captive portal's hood.  It should only be used by the captive portal daemon.

# Written by Sitwon and The Doctor.
# License: GPLv3

IPTABLES=/usr/sbin/iptables
ARP=/sbin/arp

# Set up the choice tree of options that can be passed to this script.
case "$1" in
    'initialize')
        # $2: IP address of the client interface.  Assumes final octet is .1.

        # Initialize the IP tables ruleset by creating a new chain for captive
        # portal users.
        $IPTABLES -N internet --table mangle

        # Convert the IP address of the client interface into a netblock.
        CLIENTNET=$(ip -o addr show br-lan | awk '/inet / { print $4 }')

        # Exempt traffic which does not originate from the client network.
        $IPTABLES --table mangle -A PREROUTING -p tcp ! -s $CLIENTNET -j RETURN
        $IPTABLES --table mangle -A PREROUTING -p udp ! -s $CLIENTNET -j RETURN

        # Traffic not exempted by the above rules gets kicked to the captive
        # portal chain.  When a use clicks through a rule is inserted above
        # this one that matches them with a RETURN.
        $IPTABLES --table mangle -A PREROUTING -j internet

        # Traffic not coming from an accepted user gets marked 99.
        $IPTABLES --table mangle -A internet -j MARK --set-mark 99

        # $2 is actually the IP address of the client interface, so let's make
        # it a bit more clear.
        CLIENTIP=${CLIENTNET%%/*}

        # Traffic which has been marked 99 and is headed for 80/TCP or 443/TCP
        # should be redirected to the captive portal web server.
        $IPTABLES --table nat -A PREROUTING -m mark --mark 99 -p tcp --dport 80 -j DNAT --to-destination $CLIENTIP:80
        $IPTABLES --table nat -A PREROUTING -m mark --mark 99 -p tcp --dport 443 -j DNAT --to-destination $CLIENTIP:443
        $IPTABLES --table nat -A PREROUTING -m mark --mark 99 -p udp --dport 53 -j DNAT --to-destination $CLIENTIP:53

        # All other traffic which is marked 99 is just dropped
        $IPTABLES --table filter -A FORWARD -m mark --mark 99 -j DROP

        # Allow incoming traffic that is headed for the local node.
        $IPTABLES --table filter -A INPUT -p tcp --dport 22 -j ACCEPT
        $IPTABLES --table filter -A INPUT -p tcp --dport 80 -j ACCEPT
        $IPTABLES --table filter -A INPUT -p udp --dport 53 -j ACCEPT
        $IPTABLES --table filter -A INPUT -p udp --dport 67 -j ACCEPT
        $IPTABLES --table filter -A INPUT -p udp --dport 5353 -j ACCEPT
        $IPTABLES --table filter -A INPUT -p icmp -j ACCEPT

        # But reject anything else coming from unrecognized users.
        $IPTABLES --table filter -A INPUT -m mark --mark 99 -j DROP

	exit 0
        ;;
    'add')
        # $2: IP address of client.
        CLIENT="$2"

        # Isolate the MAC address of the client in question.
        CLIENTMAC="$(awk "/$CLIENT/ { print \$4}" /proc/net/arp)"

	# Check to make sure we actually have a mac
	[ -z "$CLIENTMAC" ] && echo "MAC for $CLIENT not found" >&2 && exit 1
        # Add the MAC address of the client to the whitelist, so it'll be able
        # to access the mesh even if its IP address changes.
        $IPTABLES --table mangle -I internet -m mac --mac-source $CLIENTMAC -j RETURN -m comment --comment "$CLIENT $(date +%s)"

	exit 0
        ;;
    'remove')
        # $2: IP or MAC address of client.
	if echo "$2" | grep -q "\."; then
        	CLIENT="$2"
        	# Isolate the MAC address of the client in question.
        	CLIENTMAC="$(awk "/$CLIENT/ { print \$4}" /proc/net/arp)"
		# Check to make sure we actually have a mac
		[ -z "$CLIENTMAC" ] && echo "MAC for $CLIENT not found" >&2 && exit 1
	elif echo "$2" | grep -q "\:"; then
        	CLIENTMAC="$2"
	else
		echo "This is not an IP or MAC" >&2
		exit 1
	fi

	num=$($IPTABLES --line-numbers --table mangle --list internet | awk "/$CLIENTMAC/ {print \$1}")

        # Delete the MAC address of the client from the whitelist.
        $IPTABLES --table mangle -D internet $num

	exit 0
        ;;
    'purge')
        # Purge all of the IP tables rules.
        $IPTABLES -F
        $IPTABLES -X
        $IPTABLES --table nat -F
        $IPTABLES --table nat -X
        $IPTABLES --table mangle -F
        $IPTABLES --table mangle -X
        $IPTABLES --table filter -F
        $IPTABLES --table filter -X

	exit 0
        ;;
    'list')
	# Display the currently running IP tables ruleset.
	$IPTABLES --numeric --table mangle --list internet | awk '$6=="MAC" {
		sub("^.*MAC ", "", $0);
		sub(" /\\*", "", $0);
		sub(" \\*/", "", $0);
		print $0}'

	exit 0
	;;
    *)
        echo "USAGE: $0 {initialize <IP> <interface>|add <IP> <interface>|remove <IP> <interface>|purge|list}"
        exit 0
    esac
