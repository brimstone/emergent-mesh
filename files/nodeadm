#!/bin/ash

isclient() {
	batctl gw 2>/dev/null | grep -q "client"
}

isserver() {
	batctl gw 2>/dev/null | grep -q "server"
}

nogateways() {
	batctl gwl | grep -q "No gateways in range"
}

gateways() {
	# this should return a list of the IPs of other gateways on the mesh
	avahi-browse -ltrap | awk -F\; '/=;br-lan.*_mesh._tcp.*mode=(standalone|gateway)/ {print $8}'
}

isrunning() {
	pidof "$1" >/dev/null
}

blink() {
	echo "timer" > /sys/devices/platform/leds-gpio/leds/tp-link\:blue\:system/trigger
}

solid() {
	echo "default-on" > /sys/devices/platform/leds-gpio/leds/tp-link\:blue\:system/trigger
}

isrouting() {
	iptables -t nat -vnL | grep -q MASQ
}

logit() {
	echo "$1"
	echo "$(date) $1" >> /tmp/node.log
}

gatewaymode() {
	solid
	isserver || batctl gw server || return
	# hand out ips
	if grep -q "address=/#/" /etc/dnsmasq.conf; then
		rm /etc/dnsmasq.conf
		touch /etc/dnsmasq.conf
		/etc/init.d/dnsmasq stop
		/etc/init.d/dnsmasq start
	fi
	isrunning dnsmasq || /etc/init.d/dnsmasq start
	writeservice gateway
	(
		echo "delete system.ntp.server"
		for g in 0 1 2 3; do
			echo "add_list system.ntp.server='$g.openwrt.pool.ntp.org'"
		done
		echo "commit"
	) | uci batch
	/etc/init.d/sysntpd restart
}

standalonemode() {
	solid
	batctl gw server || return
	logit "now a server"
	# start handing out IPs
	/etc/init.d/dnsmasq stop
	# we don't know anything, so become everything!
	echo "address=/#/1.1.1.1" > /etc/dnsmasq.conf
	/etc/init.d/dnsmasq start
	ifconfig eth0 192.168.0.2
	route add default gw 192.168.0.1
	writeservice standalone
	(
		echo "delete system.ntp.server"
		echo "commit"
	) | uci batch
	/etc/init.d/sysntpd restart
}

clientmode() {
	blink
	batctl gw client || return
	/etc/init.d/dnsmasq stop
	logit "now a client"
	writeservice client
	(
		echo "delete system.ntp.server"
		for g in $(gateways); do
			echo "add_list system.ntp.server='$g'"
		done
		echo "commit"
	) | uci batch
	/etc/init.d/sysntpd restart
}

config() {
### Main radio0 will broadcast one AP with no encryption 
### Another VAP in adhoc mode is added to main radio0.

### Node-specific settings
[ -z "$HOSTNAME" ] && read -p "Hostname: " HOSTNAME
[ -z "$IP" ] && read -p "IP: " IP

### These parameters should be consistent across all nodes
[ -z "$NETMASK" ] && read -p "Netmask: " NETMASK 
[ -z "$PUBLIC_BSSID" ] && read -p "Public BSSID (hex): " PUBLIC_BSSID
[ -z "$PUBLIC_ESSID" ] && read -p "Public ESSID (text): " PUBLIC_ESSID
[ -z "$ADHOC0_BSSID" ] && read -p "Ad-Hoc BSSID (hex): " ADHOC0_BSSID
[ -z "$ADHOC0_ESSID" ] && read -p "Ad-Hoc ESSID (text): " ADHOC0_ESSID
[ -z "$ADHOC0_CHANNEL" ] && read -p "Ad-Hoc Channel: " ADHOC0_CHANNEL
export DNS="" 
export GATEWAY="" 

### Ensure of populating /etc/config/wireless with 
### autodetected wifi-device entries (radioX)
### to get all list_capab and hwmode correct. Otherwise
### OpenWRT might fail to configure the radio properly.
wifi detect >>/etc/config/wireless

### Clear preexisting wifi-iface sections to avoid conflicts or dups
( for i in `seq 0 9` ; do echo "delete wireless.@wifi-iface[]" ; done ) | uci batch -q

### Create /etc/config/batman-adv if it's not there yet.
uci import -m batman-adv </dev/null

echo " 
set system.@system[0].hostname=$HOSTNAME
set system.@timeserver[0].enable_server=1
set dhcp.@dnsmasq[0].domain=mesh

set batman-adv.bat0=mesh
set batman-adv.bat0.gw_mode=client

delete network.wan
set network.wan=interface
set network.wan.ifname=eth0
set network.wan.proto=dhcp
set network.lan.ipaddr=$IP
set network.lan.netmask=$NETMASK
set network.lan.dns='$DNS'
set network.lan.gateway=$GATEWAY
set network.lan.ifname='bat0'
set network.mesh=interface
set network.mesh.ifname=adhoc0
set network.mesh.proto=batadv
set network.mesh.mtu=1528
set network.mesh.mesh=bat0

set wireless.radio0=wifi-device
set wireless.radio0.channel=$ADHOC0_CHANNEL
set wireless.radio0.disabled=0
set wireless.radio0.phy=phy0
set wireless.radio0.macaddr=

add wireless wifi-iface
set wireless.@wifi-iface[-1].device=radio0
set wireless.@wifi-iface[-1].encryption=none
set wireless.@wifi-iface[-1].network=lan
set wireless.@wifi-iface[-1].mode=ap
set wireless.@wifi-iface[-1].ssid='$PUBLIC_ESSID'
set wireless.@wifi-iface[-1].bssid=$PUBLIC_BSSID

add wireless wifi-iface
set wireless.@wifi-iface[-1].device=radio0 
set wireless.@wifi-iface[-1].ifname=adhoc0
set wireless.@wifi-iface[-1].encryption=none
set wireless.@wifi-iface[-1].network=mesh
set wireless.@wifi-iface[-1].mode=adhoc 
set wireless.@wifi-iface[-1].bssid=$ADHOC0_BSSID
set wireless.@wifi-iface[-1].ssid='$ADHOC0_ESSID'
set wireless.@wifi-iface[-1].mcast_rate=11000 
set wireless.@wifi-iface[-1].hidden=true

commit" \
| uci batch
echo "export PUBLIC_ESSID=\"$PUBLIC_ESSID\"" > /www/nodeconfig
echo "export PUBLIC_BSSID=\"$PUBLIC_BSSID\"" >> /www/nodeconfig
}

search() {
	# cd /tmp; rm nodeadm; wget http://192.168.1.2/nodeadm ; chmod 755 nodeadm
	logit "Searching for open ad-hoc networks"
	uci set wireless.radio0.disabled=0
	wifi
	sleep 5
	networkinfo="$(aps | grep "OPN Ad-Hoc")"
	c=$(echo "$networkinfo" | wc -l)
	logit "found: $networkinfo"
	if [ -z "$networkinfo" ]; then
		logit "No ad-hoc networks found, come back later"
		exit 1
	fi
	if [ $c -gt 1 ]; then
		logit "Many ad-hoc networks found, write the bits of $0 that can figure out how to handle this"
		exit 1
	fi
	export ADHOC0_BSSID=$(echo "$networkinfo" | awk '{print $1}')
	export ADHOC0_CHANNEL=$(echo "$networkinfo" | awk '{print $2}')
	export ADHOC0_ESSID=$(echo "$networkinfo" | sed "s/$ADHOC0_BSSID $ADHOC0_CHANNEL OPN Ad-Hoc //")
	killall hostapd
	ifconfig wlan0 up
	sleep 2
	logit "Configuring wlan0 with mode ad-hoc essid \"$ADHOC0_ESSID\" channel \"$ADHOC0_CHANNEL\" ap \"$ADHOC0_BSSID\""
	iwconfig wlan0 mode ad-hoc essid "$ADHOC0_ESSID" channel "$ADHOC0_CHANNEL" ap "$ADHOC0_BSSID"
	logit "Bringing up interfaces"
	ifconfig wlan0 mtu 1528 up
	batctl if add wlan0
	brctl addif br-lan bat0
	ifconfig bat0 up
	sleep 2
	logit "Trying to get an ip for br-lan"
	udhcpc -T 2 -t 30 -A 2 -i br-lan | tee -a /tmp/node.log
	export IP="$(ifconfig br-lan | awk '/inet/ {sub(/addr:/, "", $2); print $2}')"
	export NETMASK="$(ifconfig br-lan | awk '/inet/ {sub(/Mask:/, "", $4); print $4}')"
	logit "Got $IP/$NETMASK"
}

getmode() {
	if senselink && isserver; then
		echo "Gateway"
		return
	fi
	if isserver; then
		echo "Standalone"
		return
	fi
	if isclient; then
		echo "Client"
		return
	fi
	echo "Unknown"
}
writeservice() {
	mode="$1"
	cat > /etc/avahi/services/mesh.service << dog
<?xml version="1.0" standalone='no'?><!--*-nxml-*-->
<!DOCTYPE service-group SYSTEM "avahi-service.dtd">
<service-group>
 <name replace-wildcards="yes">Mesh Node on %h</name>
  <service>
   <type>_mesh._tcp</type>
   <port>0</port>
   <txt-record>mode=$1</txt-record>
  </service>
</service-group>
dog
/etc/init.d/avahi-daemon restart
}

writestatus() {
	DBROOT="/db"
	[ ! -d "$DBROOT" ] && mkdir "$DBROOT"
	[ ! -e "$DBROOT/status/$HOST.json" ] && rm -rf "$DBROOT/status" 2>/dev/null
	[ ! -d "$DBROOT/status" ] && mkdir "$DBROOT/status"

	. /usr/share/libubox/jshn.sh
	json_init
	json_add_string mode "$(getmode)"
	json_add_int time "$(date +%s)"
	json_add_object flash
		json_add_int used "$(df /overlay | awk '/^\// { print $4}')"
		json_add_int total "$(df /overlay | awk '/^\// { print $2}')"
	json_close_object
	json_add_object load
		json_add_string text "$(awk '{print $2}' /proc/loadavg)"
	json_close_object
	json_add_object memory
		json_add_int used "$(free -m | awk '/^Mem/ {print $3}')"
		json_add_int total "$(free -m | awk '/^Mem/ {print $2}')"
	json_close_object
	json_add_object arp
		eval $(awk '/br-lan/ {	print "json_add_object " toupper($4) ";\n";
						print "json_add_string \"ip\" " $1 ";\n";
					print "json_close_object;\n";
		}' /proc/net/arp)
	json_close_object
	json_add_object captive
		eval $(captive-portal list | awk '{	print "json_add_object " toupper($1) ";\n";
						print "json_add_string \"ip\" " $2 ";\n";
						print "json_add_int \"time\" " $3 ";\n";
					print "json_close_object;\n";
		}')
	json_close_object
	json_add_object station
		eval $(iw dev wlan0 station dump | awk '/Station/ { m=toupper($2) }
			/signal:/ { s=$2 }
			/tx bitrate:/ { b=$3 }
			/TDLS/{	print "json_add_object " m ";\n";
					print "json_add_string \"signal\" " s ";\n";
					print "json_add_string \"bitrate\" " b ";\n";
				print "json_close_object;\n"}')
	json_close_object
	json_add_object software
		json_add_string version "$(opkg info emergent-mesh | awk '/Version:/ {print $2}')"
	json_close_object
	json_dump > "$DBROOT/status/$HOST.json"

# vim: filetype=sh
}

case "$1" in
'check')
if [ -z "$(uci get wireless.@wifi-iface[0].bssid 2>/dev/null)" ]; then
	search
	# get the config from the main router
	masternode=$(ip route get 1.1.1.1 | awk '{print $3}')
	# call config with values from json thingy at /node.config
	eval $(wget http://$masternode/nodeconfig -O -)
	export HOSTNAME="node"
	if [ -z "$PUBLIC_ESSID" ]; then
		logit "Auto configuration failed"
		exit 1
	fi
	config
	reboot
fi
MYNET="$(ip -o addr show dev br-lan | awk '/inet / {print $4}')"
MYIP="${MYNET%%/*}"
if ! isrouting; then
	# set iptables rules
	iptables -t nat -F POSTROUTING
	iptables -t nat -A POSTROUTING -s $MYNET -j MASQUERADE
	# set kernel forwarder
	echo 1 > /proc/sys/net/ipv4/ip_forward
	logit "Setting up routing"
fi

HOST="$(uci get system.@system[0].hostname)"
writestatus

avahi-browse -ltrap | awk -F\; '/=;br-lan.*_mesh._tcp/ {print $8}' | while read anode; do
	echo "Replicating $anode"
	replicatedb $anode
done

# if we have a link
if senselink; then
	logit "has a link"
	# be a gateway
	gatewaymode
	# we're done here
	exit
fi

# if we're a server
if isserver; then
	# so, we're a server without a link
	# if there are other gateways on the network that aren't us
	logit "is a server"
	if ! nogateways; then
		# be a client and bail
		clientmode
		logit "has gateways"
		exit
	fi
	logit "No other gateways"
	exit
fi

# pick a random number between 0 and 2
# if it's 0
if nogateways && [ $(( $RANDOM % 3 )) = 0 ]; then
	# become a server
	standalonemode
	exit
fi

# we don't have a link
# we're not already a server
# we didn't just become a server
# make us a client
clientmode
	exit 0
	;;
'gateway')
	gatewaymode
	exit 0
	;;
'standalone')
	standalonemode
	exit 0
	;;
'client')
	clientmode
	exit 0
	;;
'mode')
	getmode
	exit 0
	;;
'config')
	config
	exit 0
	;;
esac

echo "Usage: $0 <check|gateway|standalone|client|mode|config>"
exit 1

# vim: filetype=sh
