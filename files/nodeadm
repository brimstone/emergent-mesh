#!/bin/sh

nolink() {
	ethtool eth0 | grep -q "Link detected: no"
}

isclient() {
	batctl gw | grep -q "client"
}

isserver() {
	batctl gw | grep -q "server"
}

nogateways() {
	batctl gwl | grep -q "No gateways in range"
}

isrunning() {
	pidof "$1" >/dev/null
}

blink() {
	echo "timer" > /sys/devices/platform/leds-gpio/leds/tp-link\:blue\:system/trigger
}

solid() {
	echo "default-on" > /sys/devices/platform/leds-gpio/leds/tp-link\:blue\:system/trigger
}


isrouting() {
	iptables -t nat -vnL | grep -q MASQ
}

logit() {
	echo "$(date) $1" >> /tmp/node.log
}

gatewaymode() {
	solid
	isserver || batctl gw server
	# hand out ips
	if grep -q "address=/#/" /etc/dnsmasq.conf; then
		rm /etc/dnsmasq.conf
		touch /etc/dnsmasq.conf
		/etc/init.d/dnsmasq stop
		/etc/init.d/dnsmasq start
	fi
	isrunning dnsmasq || /etc/init.d/dnsmasq start
	/etc/init.d/nodogsplash start
}

standalonemode() {
	solid
	batctl gw server
	logit "now a server"
	# start handing out IPs
	/etc/init.d/dnsmasq stop
	# we don't know anything, so become everything!
	echo "address=/#/1.1.1.1" > /etc/dnsmasq.conf
	/etc/init.d/dnsmasq start
	/etc/init.d/nodogsplash start
	ifconfig eth0 192.168.0.2
	route add default gw 192.168.0.1
}

clientmode() {
	blink
	batctl gw client
	/etc/init.d/dnsmasq stop
	/etc/init.d/nodogsplash stop
	logit "now a client"
}

config() {
### Main radio0 will broadcast one AP with no encryption 
### Another VAP in adhoc mode is added to main radio0.

### Node-specific settings
read -p "Hostname: " HOSTNAME
read -p "IP: " IP

### These parameters should be consistent across all nodes
export NETMASK="255.255.252.0" 
export DNS="" 
export GATEWAY="" 
export PUBLIC_ESSID="The Mesh"
export PUBLIC_BSSID="DE:AD:BE:EF:CA:FE"
export ADHOC0_BSSID="CA:CA:CA:CA:CA:00" 
export ADHOC0_ESSID="meshtrunk"
export ADHOC0_CHANNEL="1" 

### Ensure of populating /etc/config/wireless with 
### autodetected wifi-device entries (radioX)
### to get all list_capab and hwmode correct. Otherwise
### OpenWRT might fail to configure the radio properly.
wifi detect >>/etc/config/wireless

### Clear preexisting wifi-iface sections to avoid conflicts or dups
( for i in `seq 0 9` ; do echo "delete wireless.@wifi-iface[]" ; done ) | uci batch -q

### Create /etc/config/batman-adv if it's not there yet.
uci import -m batman-adv </dev/null

echo " 
set system.@system[0].hostname=$HOSTNAME
set dhcp.@dnsmasq[0].domain=mesh

set batman-adv.bat0=mesh
set batman-adv.bat0.gw_mode=client

delete network.wan
set network.wan=interface
set network.wan.ifname=eth0
set network.wan.proto=dhcp
set network.lan.ipaddr=$IP
set network.lan.netmask=$NETMASK
set network.lan.dns='$DNS'
set network.lan.gateway=$GATEWAY
set network.lan.ifname='bat0'
set network.mesh=interface
set network.mesh.ifname=adhoc0
set network.mesh.proto=batadv
set network.mesh.mtu=1528
set network.mesh.mesh=bat0

set wireless.radio0=wifi-device
set wireless.radio0.channel=$ADHOC0_CHANNEL
set wireless.radio0.disabled=0
set wireless.radio0.phy=phy0
set wireless.radio0.macaddr=

add wireless wifi-iface
set wireless.@wifi-iface[-1].device=radio0
set wireless.@wifi-iface[-1].encryption=none
set wireless.@wifi-iface[-1].network=lan
set wireless.@wifi-iface[-1].mode=ap
set wireless.@wifi-iface[-1].ssid='$PUBLIC_ESSID'
set wireless.@wifi-iface[-1].bssid=$PUBLIC_BSSID

add wireless wifi-iface
set wireless.@wifi-iface[-1].device=radio0 
set wireless.@wifi-iface[-1].ifname=adhoc0
set wireless.@wifi-iface[-1].encryption=none
set wireless.@wifi-iface[-1].network=mesh
set wireless.@wifi-iface[-1].mode=adhoc 
set wireless.@wifi-iface[-1].bssid=$ADHOC0_BSSID
set wireless.@wifi-iface[-1].ssid='$ADHOC0_ESSID'
set wireless.@wifi-iface[-1].mcast_rate=11000 
set wireless.@wifi-iface[-1].hidden=true

commit" \
| uci batch
}

if [ "$1" = "check" ]; then

MYNET="$(ip -o addr show dev br-lan | awk '/inet / {print $4}')"
MYIP="${MYNET%%/*}"
if ! isrouting; then
	# set iptables rules
	iptables -t nat -F POSTROUTING
	iptables -t nat -A POSTROUTING -s $MYNET -j MASQUERADE
	# set kernel forwarder
	echo 1 > /proc/sys/net/ipv4/ip_forward
	logit "Setting up routing"
fi

if ! grep -q "$MYIP" /etc/nodogsplash/nodogsplash.conf; then
	sed -i "/FirewallRuleSet preauthenticated-users/ a FirewallRule allow tcp port 80 to $MYIP" /etc/nodogsplash/nodogsplash.conf
	/etc/init.d/nodogsplash stop
	/etc/init.d/nodogsplash start
fi

HOST="$(uci get system.@system[0].hostname)"
if ! grep -q "$HOST" /etc/nodogsplash/htdocs/splash.html; then
	cat << dog > /etc/nodogsplash/htdocs/splash.html
<html>
<head>
<meta http-equiv="refresh" content="0;URL='http://$HOST.mesh/'">
</head>
<body>
</body>
</html>
dog
fi

# if we have a link
if ! nolink; then
	logit "has a link"
	# be a gateway
	gatewaymode
	# we're done here
	exit
fi

# if we're a server
if isserver; then
	# so, we're a server without a link
	# if there are other gateways on the network that aren't us
	logit "is a server"
	if ! nogateways; then
		# be a client and bail
		clientmode
		logit "has gateways"
		exit
	fi
	logit "No other gateways"
	exit
fi

# pick a random number between 0 and 9
# if it's 0
if nogateways && [ $(( $RANDOM % 10 )) = 0 ]; then
	# become a server
	standalonemode
	exit
fi

# we don't have a link
# we're not already a server
# we didn't just become a server
# make us a client
clientmode
elif [ "$1" = "gateway" ]; then
	gatewaymode
elif [ "$1" = "standalone" ]; then
	standalonemode
elif [ "$1" = "client" ]; then
	clientmode
elif [ "$1" = "mode" ]; then
	if ! nolink && isserver; then
		echo "Gateway"
		exit
	fi
	if isserver; then
		echo "Standalone"
		exit
	fi
	if isclient; then
		echo "Client"
		exit
	fi
	echo "Unknown"
	exit
elif [ "$1" = "config" ]; then
	config
else
	echo "Usage: $0 <check|gateway|standalone|client|mode|config>"
fi
